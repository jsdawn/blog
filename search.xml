<?xml version="1.0" encoding="utf-8"?>
<search> 
  
    
    <entry>
      <title>移动端回退刷新机制</title>
      <link href="/blog/2018/04/17/%E7%A7%BB%E5%8A%A8%E7%AB%AF%E5%9B%9E%E9%80%80%E5%88%B7%E6%96%B0%E6%9C%BA%E5%88%B6/"/>
      <url>/blog/2018/04/17/%E7%A7%BB%E5%8A%A8%E7%AB%AF%E5%9B%9E%E9%80%80%E5%88%B7%E6%96%B0%E6%9C%BA%E5%88%B6/</url>
      <content type="html"><![CDATA[<p>移动端回退刷新机制，有两种方案：</p><h3 id="方案1：html-头部-meta"><a href="#方案1：html-头部-meta" class="headerlink" title="方案1：html 头部 meta"></a>方案1：html 头部 meta</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&lt;meta http-equiv=<span class="string">"cache-control"</span> content=<span class="string">"no-cache"</span> /&gt;</span><br><span class="line">&lt;meta http-equiv=<span class="string">"expires"</span> content=<span class="string">"0"</span> /&gt;</span><br><span class="line">&lt;meta http-equiv=<span class="string">"expires"</span> content=<span class="string">"Tue, 01 Jan 1980 1:00:00 GMT"</span> /&gt;</span><br><span class="line">&lt;meta http-equiv=<span class="string">"pragma"</span> content=<span class="string">"no-cache"</span> /&gt;</span><br></pre></td></tr></table></figure><h3 id="方案2：js方式"><a href="#方案2：js方式" class="headerlink" title="方案2：js方式"></a>方案2：js方式</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">&lt;script&gt;</span><br><span class="line">window.onpageshow = <span class="keyword">function</span>(event) &#123;</span><br><span class="line"><span class="keyword">if</span>(event.persisted) &#123;</span><br><span class="line">window.location.reload()</span><br><span class="line">&#125;</span><br><span class="line">&#125;;</span><br><span class="line">var SERVER_TIME = <span class="string">'$&#123;((SERVER_TIME!0)?long)?c&#125;'</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>(SERVER_TIME &amp;&amp; SERVER_TIME != <span class="string">'0'</span>) &#123;</span><br><span class="line">var LOCAL_TIME = sessionStorage &amp;&amp; sessionStorage[<span class="string">'LOCAL_TIME'</span> + <span class="string">'$&#123;pageName!&#125;'</span>];</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>(LOCAL_TIME &amp;&amp; parseInt(LOCAL_TIME) &gt;= parseInt(SERVER_TIME)) &#123;</span><br><span class="line">window.location.reload();</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">sessionStorage[<span class="string">'LOCAL_TIME'</span> + <span class="string">'$&#123;pageName!&#125;'</span>] = SERVER_TIME;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure>]]></content>
      
      <categories>
          
          <category> Javascript </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Javascript </tag>
            
            <tag> Html5 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>JS 解析url函数</title>
      <link href="/blog/2018/04/17/JS-%E8%A7%A3%E6%9E%90url%E5%87%BD%E6%95%B0/"/>
      <url>/blog/2018/04/17/JS-%E8%A7%A3%E6%9E%90url%E5%87%BD%E6%95%B0/</url>
      <content type="html"><![CDATA[<p>实现函数 <code>parseUrl(url)</code>解析url字符串各个部分<br>例如 <a href="http://www.baidu.com/product/page?id=123456&amp;name=dawn#title" target="_blank" rel="noopener">http://www.baidu.com/product/page?id=123456&amp;name=dawn#title</a><br>返回的结果为</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">protocol:<span class="string">"http"</span>,</span><br><span class="line">host:<span class="string">"www.baidu.com"</span>,</span><br><span class="line">query:&#123;</span><br><span class="line">id:<span class="string">"123456"</span>,</span><br><span class="line">name:<span class="string">"dawn"</span></span><br><span class="line">&#125;,</span><br><span class="line"><span class="built_in">hash</span>:<span class="string">"title"</span>,</span><br><span class="line">path:<span class="string">"/product/page"</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p> <code>parseUrl(url)</code> 函数</p> <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> parseUrl(url) &#123;</span><br><span class="line">var a = document.createElement(<span class="string">'a'</span>);</span><br><span class="line">a.href = url;</span><br><span class="line"><span class="built_in">return</span> &#123;</span><br><span class="line">  protocol: a.protocol.replace(<span class="string">':'</span>, <span class="string">''</span>),</span><br><span class="line">  host: a.hostname,</span><br><span class="line">  query: (<span class="function"><span class="title">function</span></span>() &#123;</span><br><span class="line">var params = &#123;&#125;,</span><br><span class="line">  Arr = a.search.replace(/^\?/, <span class="string">''</span>).split(<span class="string">'&amp;'</span>), //获取参数对</span><br><span class="line">  len = Arr.length,</span><br><span class="line">  i = 0,</span><br><span class="line">  s;</span><br><span class="line">  <span class="keyword">for</span>(; i &lt; len; i++) &#123;</span><br><span class="line">  <span class="keyword">if</span>(!Arr[i]) &#123;</span><br><span class="line"><span class="built_in">continue</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  s = Arr[i].split(<span class="string">'='</span>); //分割键值对</span><br><span class="line">  params[s[0]] = s[1];</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">return</span> params;</span><br><span class="line">  &#125;)(),</span><br><span class="line">  <span class="built_in">hash</span>: a.hash.replace(<span class="string">'#'</span>, <span class="string">''</span>),</span><br><span class="line">  path: a.pathname</span><br><span class="line">&#125;;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      <categories>
          
          <category> Javascript </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Javascript </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>Ajax 原理和运行机制</title>
      <link href="/blog/2018/04/17/Ajax-%E5%8E%9F%E7%90%86%E5%92%8C%E8%BF%90%E8%A1%8C%E6%9C%BA%E5%88%B6/"/>
      <url>/blog/2018/04/17/Ajax-%E5%8E%9F%E7%90%86%E5%92%8C%E8%BF%90%E8%A1%8C%E6%9C%BA%E5%88%B6/</url>
      <content type="html"><![CDATA[<h3 id="ajax的原理"><a href="#ajax的原理" class="headerlink" title="ajax的原理"></a>ajax的原理</h3><p>  通过<code>XmlHttpRequest</code>对象向服务器发送异步请求，服务器响应数据，JavaScript操作DOM不刷新页面的前提下更新页面里相应的数据</p><h3 id="运行机制"><a href="#运行机制" class="headerlink" title="运行机制"></a>运行机制</h3><p><code>XmlHttpRequest</code> 是ajax的核心机制，它有五个属性：<br><code>onreadystatechange</code>  每次状态改变所触发事件的事件处理程序<br><code>responseText</code> 从服务器进程返回数据的字符串形式<br><code>responseXML</code> 从服务器进程返回数据的xml数据形式<br><code>status</code>  从服务器返回的数字代码，404、200<br><code>statusText</code> 伴随状态的字符串信息<br><code>readyState</code> 对象状态值,0-未初始化 1-正在加载 2-加载完毕 3-交互 4-完成</p><p>执行步骤：</p><h4 id="创建XmlHttpRequest-对象"><a href="#创建XmlHttpRequest-对象" class="headerlink" title="创建XmlHttpRequest 对象"></a>创建XmlHttpRequest 对象</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">var xhr;</span><br><span class="line"><span class="keyword">if</span>(window.XMLHttpRequest)&#123;</span><br><span class="line">  xhr = new XMLHttpRequest();</span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line">  xhr = new ActiveXObject(<span class="string">"Microsoft.XMLHttp"</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="向服务器发送请求"><a href="#向服务器发送请求" class="headerlink" title="向服务器发送请求"></a>向服务器发送请求</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">xhr.open(<span class="string">"GET"</span>,<span class="string">"text.do"</span>,<span class="literal">true</span>);</span><br><span class="line">xhr.send();</span><br></pre></td></tr></table></figure><h4 id="服务器响应"><a href="#服务器响应" class="headerlink" title="服务器响应"></a>服务器响应</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">xhr.onreadystatechange=<span class="function"><span class="title">function</span></span>()&#123;</span><br><span class="line"><span class="keyword">if</span>(status==<span class="string">"200"</span>&amp;&amp;readyState=<span class="string">"4"</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      <categories>
          
          <category> Javascript </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Javascript </tag>
            
            <tag> Ajax </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>Vue随手笔记：三步轻松实现主题切换</title>
      <link href="/blog/2018/04/16/Vue%E9%9A%8F%E6%89%8B%E7%AC%94%E8%AE%B0%EF%BC%9A%E4%B8%89%E6%AD%A5%E8%BD%BB%E6%9D%BE%E5%AE%9E%E7%8E%B0%E4%B8%BB%E9%A2%98%E5%88%87%E6%8D%A2/"/>
      <url>/blog/2018/04/16/Vue%E9%9A%8F%E6%89%8B%E7%AC%94%E8%AE%B0%EF%BC%9A%E4%B8%89%E6%AD%A5%E8%BD%BB%E6%9D%BE%E5%AE%9E%E7%8E%B0%E4%B8%BB%E9%A2%98%E5%88%87%E6%8D%A2/</url>
      <content type="html"><![CDATA[<p>现在我们写一个网站出来，能正常运行操作，已经算是项目的完成了。想在完成功能的情况下加一些绚丽的画面，比如切换主题。</p><h3 id="写在前面"><a href="#写在前面" class="headerlink" title="写在前面"></a>写在前面</h3><p>简单说一下切换主题的种类。<br><img src="/blog/img/vue/vue-s-1.jpg" alt="颜色板切换主题颜色"></p><h4 id="第一类：提供一个颜色板，用户选择不同颜色，页面上的主要画面和按钮等变成这个颜色。"><a href="#第一类：提供一个颜色板，用户选择不同颜色，页面上的主要画面和按钮等变成这个颜色。" class="headerlink" title="第一类：提供一个颜色板，用户选择不同颜色，页面上的主要画面和按钮等变成这个颜色。"></a>第一类：提供一个颜色板，用户选择不同颜色，页面上的主要画面和按钮等变成这个颜色。</h4><p><img src="/blog/img/vue/vue-s-2.jpg" alt="切换复杂主题"></p><h4 id="第二类：指定地方更换不同的颜色或者样式ui，比如：原来在右下角是去年的“鸡”年图案，今年我想切换成“狗”年图案。这种变换图片背景或者更加复杂的程度，是第一类提供颜色板做不到的。"><a href="#第二类：指定地方更换不同的颜色或者样式ui，比如：原来在右下角是去年的“鸡”年图案，今年我想切换成“狗”年图案。这种变换图片背景或者更加复杂的程度，是第一类提供颜色板做不到的。" class="headerlink" title="第二类：指定地方更换不同的颜色或者样式ui，比如：原来在右下角是去年的“鸡”年图案，今年我想切换成“狗”年图案。这种变换图片背景或者更加复杂的程度，是第一类提供颜色板做不到的。"></a>第二类：指定地方更换不同的颜色或者样式ui，比如：原来在右下角是去年的“鸡”年图案，今年我想切换成“狗”年图案。这种变换图片背景或者更加复杂的程度，是第一类提供颜色板做不到的。</h4><h2 id="实现步骤"><a href="#实现步骤" class="headerlink" title="实现步骤"></a>实现步骤</h2><p>接下来我们就一起学习一下第二类切换主题功能的原理和简单实现步骤。<br>原理：通过用户的选择切换到不同的.css文件</p><h3 id="第一步："><a href="#第一步：" class="headerlink" title="第一步："></a>第一步：</h3><p>准备好所需要的几个主题的样式文件，分别对应不同主题。比如我现在需要两个主题，那么预先分别写好两个这两个主题的样式。<br><img src="/blog/img/vue/vue-s-3.jpg" alt="准备所需的主题样式"></p><h3 id="第二步："><a href="#第二步：" class="headerlink" title="第二步："></a>第二步：</h3><p>在index.html的主页文件中引进默认主题的样式文件，这样在用户第一次进网站的时候呈现默认主题。另外，需要给这个link引用语句添加id，以备后面使用。<br><img src="/blog/img/vue/vue-s-4.jpg" alt="引入默认主题"></p><h3 id="第三步："><a href="#第三步：" class="headerlink" title="第三步："></a>第三步：</h3><p>编写切换功能，比如以下拉框的形式切换（以书面操作切换可以自己定）。<br><img src="/blog/img/vue/vue-s-5.jpg" alt="切换主题页面"></p><p>每次选择了主题之后需要调用 changeSky 方法动态切换当前主题，核心就在这个切换方法，拿到主题标识value，对应的标识写入对应的样式。动态改变之前引入主题css 的 link 语句中的 href 。这样就算完成了简单的切换主题功能。</p><h3 id="记忆主题"><a href="#记忆主题" class="headerlink" title="记忆主题"></a>记忆主题</h3><p>注意：看下面我备注的地方“记忆主题”，这里是加分项，是为了让用户第二次进来的时候出现上一次选择的主题。将上一次所选择的主题存放到浏览器内存中。如果需要记忆主题，那么就需要继续第四步。<br><img src="/blog/img/vue/vue-s-6.jpg" alt="动态操作主题切换"></p><p>第四步（附件步骤）：在Vue的入口页面，App.vue中初始化主题，如果用户上次操作过主题，那么就会有sky记录有主题文件。如果没有，则不操作，也就是继续显示默认主题。<br><img src="/blog/img/vue/vue-s-7.jpg" alt="初始化主题"></p><p>大功告成，接下来等待老板找你谈话吧（开玩笑的）。<br>经过我们的努力，切换主题功能已经完成，还没看懂的同学可以致邮 <a href="mailto:kingwyh1993@163.com" target="_blank" rel="noopener">kingwyh1993@163.com</a>，看懂了的同学帮助一下没看懂的。</p>]]></content>
      
      <categories>
          
          <category> Vue </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Vue </tag>
            
            <tag> Vue随手笔记 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>Hexo博客搭建简易教程</title>
      <link href="/blog/2018/04/16/hexo%E5%8D%9A%E5%AE%A2%E6%90%AD%E5%BB%BA%E7%AE%80%E6%98%93%E6%95%99%E7%A8%8B/"/>
      <url>/blog/2018/04/16/hexo%E5%8D%9A%E5%AE%A2%E6%90%AD%E5%BB%BA%E7%AE%80%E6%98%93%E6%95%99%E7%A8%8B/</url>
      <content type="html"><![CDATA[<p>自从投身互联网的怀抱，就一直想搭建一个属于自己的技术博客，把所学所思都分享给志同道合的人。<br>看过csdn博客，我也觉得挺方便的，但是想为博客定制自己的的主题样式，可能就有点难办了。偶然的机会看到了一位朋友分享的文章–“最详细的hexo博客搭建教程”，通过学习和查阅资料。<br>了解到了hexo创建博客也容易上手，并且集成了hexo部署到github上，非常的方便。<br>其中可能会遇到一些问题，可通过查询资料和百度百科解决，这里就先搭建自己的技术博客吧。</p><h3 id="Hexo简介"><a href="#Hexo简介" class="headerlink" title="Hexo简介"></a>Hexo简介</h3><p><a href="https://hexo.io/zh-cn/" target="_blank" rel="noopener">Hexo(中文官方网站)</a> 是一个快速, 简洁且高效的博客框架. 让上百个页面在几秒内瞬间完成渲染. Hexo支持Github Flavored Markdown的所有功能, 甚至可以整合Octopress的大多数插件. 并自己也拥有强大的插件系统.</p><h2 id="开发环境"><a href="#开发环境" class="headerlink" title="开发环境"></a>开发环境</h2><h3 id="安装node环境"><a href="#安装node环境" class="headerlink" title="安装node环境"></a>安装node环境</h3><p>直接到<a href="http://nodejs.cn/" target="_blank" rel="noopener">node.js官网</a> 安装即可</p><h3 id="安装Git"><a href="#安装Git" class="headerlink" title="安装Git"></a>安装Git</h3><ul><li>windows: 下载并安装 <a href="https://git-scm.com/download/win" target="_blank" rel="noopener">Git</a></li><li>Mac: 下载 <a href="https://sourceforge.net/projects/git-osx-installer/" target="_blank" rel="noopener">安装程序</a> 安装</li><li>Linux (Ubuntu, Debian)：<code>sudo apt-get install git-core</code></li></ul><h3 id="安装Hexo"><a href="#安装Hexo" class="headerlink" title="安装Hexo"></a>安装Hexo</h3><p>这之前，请确保你的node环境正确搭建完成，才可以使用npm安装hexo<br>打开 git bash,输入命令<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ npm install -g hexo-cli</span><br></pre></td></tr></table></figure></p><p>安装完成后通过 <code>$ hexo version</code> 验证是否安装成功</p><h2 id="初始化-博客-项目"><a href="#初始化-博客-项目" class="headerlink" title="初始化 博客 项目"></a>初始化 博客 项目</h2><p>进入指定文件夹，输入以下命令<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$ hexo init name    <span class="comment">#name为你的项目名称</span></span><br><span class="line">$ <span class="built_in">cd</span> name</span><br><span class="line">$ npm install</span><br></pre></td></tr></table></figure></p><h2 id="本地启动"><a href="#本地启动" class="headerlink" title="本地启动"></a>本地启动</h2><p>在项目根目录中执行下面命令<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo s</span><br></pre></td></tr></table></figure></p><p>等待片刻后会看到信息<br><code>[info] Hexo is running at http://localhost:4000/. Press Ctrl+C to stop</code><br>在浏览器中打开 <code>http://localhost:4000/</code> 就可以进入自己创建的博客默认页面啦</p><h2 id="博客配置"><a href="#博客配置" class="headerlink" title="博客配置"></a>博客配置</h2><p>参考最靠谱的 <a href="https://hexo.io/docs/configuration.html" target="_blank" rel="noopener">Hexo官方配置 </a><br>配置你的网站信息、网站配置、目录配置、文章标题、分类等</p><h2 id="创建新文章"><a href="#创建新文章" class="headerlink" title="创建新文章"></a>创建新文章</h2><p>简单的配置自己的博客之后，咱们就开始编写自己的第一篇博文吧<br>进入 之前创建的项目根目录，在git bash执行命令<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">"我的第一篇文章"</span></span><br></pre></td></tr></table></figure></p><p>之后发现 source目录下_post目录下 多了文件 <code>我的第一篇文章.md</code>，用记事本或者编辑器打开之后就可以编写文章内容啦</p><p>写完保存，执行 <code>hexo s</code>命令启动本地服务器<br>打开 <code>http://localhost:4000</code> 刷新就可以看到自己的第一篇文章</p>]]></content>
      
      <categories>
          
          <category> Hexo </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Hexo </tag>
            
        </tags>
      
    </entry>
    
  
  
</search>
